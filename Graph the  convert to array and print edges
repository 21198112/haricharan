#include <stdio.h>
#include <stdlib.h>
typedef struct Edge
{
int src, dest;
} 
Edge;
typedef struct Node 
{
int dest;
struct Node* next;
}
Node;
typedef struct AdjList
{
Node* head;
}
AdjList;
typedef struct Graph {
int V;
AdjList* array;
} 
Graph;
Node* newNode(int dest) {
Node* node = (Node*)malloc(sizeof(Node));
node->dest = dest;
node->next = NULL;
return node;
}
Graph* createGraph(int V) {
Graph* graph = (Graph*)malloc(sizeof(Graph));
graph->V = V;
graph->array = (AdjList*)malloc(V * sizeof(AdjList));
for (int i = 0; i < V; i++)
graph->array[i].head = NULL;
return graph;
}
void addEdge(Graph* graph, int src, int dest) {
Node* node = newNode(dest);
node->next = graph->array[src].head;
graph->array[src].head = node;
node = newNode(src);
node->next = graph->array[dest].head;
graph->array[dest].head = node;
}
Edge* convertToEdgeList(Graph* graph, int* edgeCount) {
*edgeCount = 0;
for (int i = 0; i < graph->V; i++) {
Node* node = graph->array[i].head;
while (node) {
(*edgeCount)++;
node = node->next;
 }
} 
*edgeCount /= 2;
Edge* edgeList = (Edge*)malloc(*edgeCount * sizeof(Edge));
int k = 0;
int* visited = (int*)calloc(graph->V, sizeof(int));
for (int i = 0; i < graph->V; i++) {
Node* node = graph->array[i].head;
while (node) {
if (!visited[node->dest]) {
edgeList[k].src = i;
edgeList[k].dest = node->dest;
k++;
}
node = node->next;
}
visited[i] = 1;
}
free(visited);
return edgeList;
}
void printEdges(Edge* edgeList, int edgeCount) {
for (int i = 0; i < edgeCount; i++) {
printf("Edge %d: %d - %d\n", i, edgeList[i].src, edgeList[i].dest);
}
}
int main() {
int V = 5;
Graph* graph = createGraph(V);
addEdge(graph, 0, 1);
addEdge(graph, 0, 4);
addEdge(graph, 1, 2);
addEdge(graph, 1, 3);
addEdge(graph, 1, 4);
addEdge(graph, 2, 3);
addEdge(graph, 3, 4);
int edgeCount;
Edge* edgeList = convertToEdgeList(graph, &edgeCount);
printEdges(edgeList, edgeCount);
free(edgeList);
for (int i = 0; i < V; i++) {
Node* node = graph->array[i].head;
while (node) {
Node* temp = node;
node = node->next;
free(temp);
}
return 0;
}
OUTPUT:
Edge 0: 0 - 1
Edge 1: 0 - 4
Edge 2: 1 - 2
Edge 3: 1 - 3
Edge 4: 1 - 4
Edge 5: 2 - 3
Edge 6: 3 - 4
