#include <stdio.h>
#include <limits.h>
#define MAX 100
#define INF INT_MAX
void primMST(int graph[MAX][MAX], int n);
int main() {
    int n, e;
    int graph[MAX][MAX];
    printf("Enter the number of vertices: ");
    scanf("%d", &n);
    // Initialize the graph with infinity (no direct path)
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            graph[i][j] = INF;
        }
    }
    printf("Enter the number of edges: ");
    scanf("%d", &e);
    for (int i = 0; i < e; i++) {
        int src, dest, weight;
        printf("Enter edge %d (source, destination, weight): ", i + 1);
        scanf("%d %d %d", &src, &dest, &weight);
        graph[src][dest] = weight;
        graph[dest][src] = weight; // For undirected graph
    }
    primMST(graph, n);
    return 0;
}
int minKey(int key[], int mstSet[], int n) {
    int min = INF, minIndex;
    for (int v = 0; v < n; v++) {
        if (!mstSet[v] && key[v] < min) {
            min = key[v];
            minIndex = v;
        }
    }

    return minIndex;
}
void printMST(int parent[], int graph[MAX][MAX], int n) {
    printf("Edge \tWeight\n");
    for (int i = 1; i < n; i++) {
        printf("%d - %d \t%d \n", parent[i], i, graph[i][parent[i]]);
    }
}
void primMST(int graph[MAX][MAX], int n) {
    int mstSet[MAX];   
    for (int i = 0; i < n; i++) {
        key[i] = INF;
        mstSet[i] = 0;
    }
    key[0] = 0;        
    parent[0] = -1;   
    for (int count = 0; count < n - 1; count++) {
        int u = minKey(key, mstSet, n);
        mstSet[u] = 1;
        for (int v = 0; v < n; v++) {
            if (graph[u][v] && !mstSet[v] && graph[u][v] < key[v]) {
                parent[v] = u;
                key[v] = graph[u][v];
            }
        }
    }
    printMST(parent, graph, n);
}

output: 
Edge    Weight
0 - 1   2
1 - 2   3
0 - 3   6
1 - 4   5
