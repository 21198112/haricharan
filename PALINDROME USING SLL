#include <stdio.h>
#include <stdlib.h>
struct Node {
char data;
struct Node* next;
};
void push(struct Node** head_ref, char new_data) {
struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
  new_node->data = new_data;
  new_node->next = (*head_ref);
  (*head_ref) = new_node;
}
int isPalindrome(struct Node* head) {
struct Node* slow = head, * fast = head;
struct Node* second_half, * prev_of_slow = head;
struct Node* midnode = NULL; 
int res = 1; 
if (head != NULL && head->next != NULL) {
 while (fast != NULL && fast->next != NULL) {
  fast = fast->next->next;
  prev_of_slow = slow;
  slow = slow->next;
  }
if (fast != NULL) {
midnode = slow;
slow = slow->next;
}
second_half = slow;
prev_of_slow->next = NULL;
reverse(&second_half); 
res = compareLists(head, second_half); 
reverse(&second_half); 
if (midnode != NULL) { 
prev_of_slow->next = midnode;
midnode->next = second_half;
} else
{
prev_of_slow->next = second_half;
}
}
return res;
}
void reverse(struct Node** head_ref) {
struct Node* prev = NULL;
struct Node* current = *head_ref;
struct Node* next;
while (current != NULL) {
next = current->next;
current->next = prev;
prev = current;
current = next;
}
*head_ref = prev;
}
int compareLists(struct Node* head1, struct Node* head2) {
struct Node* temp1 = head1;
struct Node* temp2 = head2;
while (temp1 && temp2) {
if (temp1->data == temp2->data) {
temp1 = temp1->next;
temp2 = temp2->next;
} else 
{
return 0;
}
}
if (temp1 == NULL && temp2 == NULL)
return 1;
return 0;
}
void printList(struct Node* ptr) {
while (ptr != NULL) {
printf("%c->", ptr->data);
ptr = ptr->next;
}
printf("NULL\n");
}
int main() {
struct Node* head = NULL;
char str[] = "radar";
int i;
for (i = 0; str[i] != '\0'; i++) {
push(&head, str[i]);
}
printf("Created Linked List: ");
printList(head);
if (isPalindrome(head))
printf("The linked list is a palindrome.\n");
else
printf("The linked list is not a palindrome.\n");
return 0;
}

OUTPUT:
Created Linked List: r->a->d->a->r->NULL
The linked list is a palindrome.
