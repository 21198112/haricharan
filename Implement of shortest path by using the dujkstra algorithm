#include <stdio.h>
#include <limits.h>
#define MAX 100
#define INF INT_MAX
void dijkstra(int graph[MAX][MAX], int n, int startVertex);
int main() {
    int n, e;
    int graph[MAX][MAX];
    printf("Enter the number of vertices: ");
    scanf("%d", &n);
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            graph[i][j] = INF;
        }
    }
    printf("Enter the number of edges: ");
    scanf("%d", &e);
    for (int i = 0; i < e; i++) {
        int src, dest, weight;
        printf("Enter edge %d (source, destination, weight): ", i + 1);
        scanf("%d %d %d", &src, &dest, &weight);
        graph[src][dest] = weight;
        graph[dest][src]=weight;
    }
    int startVertex;
    printf("Enter the starting vertex: ");
    scanf("%d", &startVertex);
    dijkstra(graph, n, startVertex);
    return 0;
}
int minDistance(int dist[], int visited[], int n) {
    int min = INF, minIndex;
    for (int v = 0; v < n; v++) {
        if (!visited[v] && dist[v] <= min) {
            min = dist[v];
            minIndex = v;
        }
    }
    return minIndex;
}
void dijkstra(int graph[MAX][MAX], int n, int startVertex) {
    int dist[MAX];       
    int visited[MAX];  
    // Initialize all distances as INFINITE and visited[] as false
    for (int i = 0; i < n; i++) {
        dist[i] = INF;
        visited[i] = 0;
    }
    for (int count = 0; count < n - 1; count++) {
        int u = minDistance(dist, visited, n)
        visited[u] = 1;
        for (int v = 0; v < n; v++) {
            if (!visited[v] && graph[u][v] && dist[u] != INF && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    printf("Vertex\tDistance from Source\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t%d\n", i, dist[i]);
    }
}

output: 
Enter the number of vertices: 5
Enter the number of edges: 7
Enter edge 1 (source, destination, weight): 0 1 10
Enter edge 2 (source, destination, weight): 0 4 5
Enter edge 3 (source, destination, weight): 1 2 1
Enter edge 4 (source, destination, weight): 1 4 2
Enter edge 5 (source, destination, weight): 2 3 4
Enter edge 6 (source, destination, weight): 3 4 7
Enter edge 7 (source, destination, weight): 4 2 9
Enter the starting vertex: 0
Vertex  Distance from Source
0       0
1       7
2       9
3       13
4       5
